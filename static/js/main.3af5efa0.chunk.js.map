{"version":3,"sources":["components/Menu/Menu.tsx","components/Panel/Panel.tsx","components/Tile/Tile.tsx","data-structures/queue.ts","components/Minefield/Minefield.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","onGameStarted","display","useState","width","setWidthValue","height","setHeightValue","mines","setMinesValue","menuMessage","className","style","htmlFor","id","type","min","max","placeholder","value","onChange","e","parseInt","target","onClick","Panel","flagsCount","onMenuButtonClick","Tile","x","y","isMine","isOpen","isFlagged","minesAround","classNames","label","push","join","shiftKey","Node","next","this","Queue","first","last","size","newNode","temp","Minefield","startedAt","onFlagsChanged","onMineRevealed","onAllMinesFlagged","tilesGrid","setTilesGrid","useEffect","plantedMines","plantMines","generateTilesGrid","findMinesAround","handleTileClick","flagAction","cell","isAllMinesFlagged","openEmptyNeighbours","flaggedMines","forEach","row","q","enqueue","coords","dequeue","i","j","checkX","checkY","minesMap","bombsAround","cb","rows","cells","minesAmount","randTo","to","Math","round","random","key","map","props","App","setFlagsCount","Date","setStartedAt","displayMenu","setDisplayMenu","k","changedValue","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3af5efa0.chunk.js","sourcesContent":["import React, { useState, FunctionComponent } from 'react';\nimport './Menu.sass'\n\ninterface IMenuProps {\n  onGameStarted: (width: number, height: number, mines: number) => void;\n  \n  // Shows menu with message if type is 'string', \n  // if 'true' — just show menu,\n  // if 'false' — hide menu\n  display: string | boolean; \n}\n\nconst Menu: FunctionComponent<IMenuProps> = ({onGameStarted, display}: IMenuProps) => {\n  const [width, setWidthValue] = useState(10);\n  const [height, setHeightValue] = useState(10);\n  const [mines, setMinesValue] = useState(4);\n  \n  let menuMessage = typeof display === 'string' ? <div className=\"Menu-message\">{display}</div> : null;\n\n  return (\n    <div className=\"Menu\" style={{display: display !== false ? 'flex' : 'none'}}>\n      <div className=\"Menu-panel\">\n       {menuMessage}\n        <div className=\"Menu-field\">\n          <label htmlFor=\"width\">Width</label>\n          <input id=\"width\" type=\"number\" min=\"1\" max=\"300\" placeholder=\"\" value={width} \n            onChange={(e) => { setWidthValue(parseInt(e.target.value || '0', 10))}}  />\n        </div>\n\n        <div className=\"Menu-field\">\n          <label htmlFor=\"height\">Height</label>\n          <input id=\"height\" type=\"number\" min=\"1\" max=\"300\"  value={height} \n            onChange={(e) => { setHeightValue(parseInt(e.target.value || '0', 10))}} />\n        </div>\n\n        <div className=\"Menu-field\">\n          <label htmlFor=\"mines\">Mines</label>\n          <input id=\"mines\" type=\"number\" min=\"1\" max=\"9000\"  placeholder=\"\" value={mines} \n            onChange={(e) => { setMinesValue(parseInt(e.target.value || '0', 10))}} />\n        </div>\n\n        <div className=\"Menu-field\">\n          <div className=\"Menu-btn\" onClick={() => onGameStarted(width, height, mines)}>New game</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, { FunctionComponent } from 'react';\nimport './Panel.sass';\n\ninterface IPanelProps {\n  flagsCount: number;\n  onMenuButtonClick: () => void;\n}\n\nconst Panel: FunctionComponent<IPanelProps> = ({flagsCount, onMenuButtonClick}: IPanelProps) => {\n  return (\n    <div className=\"Panel\">\n      <div className=\"Panel-menu-btn\" onClick={onMenuButtonClick}>New game</div>\n      <div className=\"Panel-flags\">{flagsCount} ⚑ </div>\n    </div>\n  );\n}\n\nexport default Panel;","import React, { FunctionComponent } from 'react';\nimport './Tile.sass';\n\nexport interface ITileProps {\n  x: number;\n  y: number;\n  isMine: boolean;\n  isOpen: boolean;\n  isFlagged: boolean;\n  minesAround: number;\n  onClick: (x: number, y: number, isFlag: boolean) => void;\n}\n\nconst Tile: FunctionComponent<ITileProps> = ({x, y, isMine, isOpen, isFlagged, minesAround, onClick}: ITileProps) => {\n  const classNames = ['Tile'];\n  let label = '';  \n  if (isOpen && isMine) {\n    label = '💣';\n  } else if (isOpen && !isMine) {\n    label = minesAround + '';\n  } else if (!isOpen && isFlagged) {\n    label = '⚑';\n    classNames.push('Tile--flagged');\n  }\n\n  if (isOpen) {\n    classNames.push('Tile--is-open');\n  }\n\n  return (\n    <div className={classNames.join(' ')} onClick={(e) => {onClick(x, y, e.shiftKey); }}>\n      <div className=\"Tile-content\">{label}</div>\n    </div>\n  );\n};\n\nexport default Tile;","class Node<T> {\n    public value: T;\n    public next: Node<T> | null = null;\n\n    constructor(value: T){\n        this.value = value\n        this.next = null;\n    }\n}\n\nexport class Queue<T> {\n    public first: Node<T> | null = null;\n    public last: Node<T> | null = null;\n    public size = 0;\n\n    constructor(){}\n\n    enqueue(value: T){\n        var newNode = new Node<T>(value);\n        if(!this.first){\n            this.first = newNode;\n            this.last = newNode;\n        } else {\n            if (this.last) {\n                this.last.next = newNode;\n            }\n            this.last = newNode;\n        }\n        return ++this.size;\n    }\n  \n    dequeue(){\n        if(!this.first) {\n            return null;\n        }\n  \n        var temp = this.first;\n        if(this.first === this.last) {\n            this.last = null;\n        }\n        this.first = this.first.next;\n        this.size--;\n        return temp.value;\n    }\n  }","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport Tile, {ITileProps} from '../Tile/Tile';\nimport './Minefield.sass';\nimport { Queue } from '../../data-structures/queue';\n\ninterface IMinefieldProps {\n  width: number;\n  height: number;\n  mines: number;\n  startedAt: Date;\n  onFlagsChanged: (k: number) => void;\n  onMineRevealed: () => void;\n  onAllMinesFlagged: () => void;\n}\n\ninterface ITileData {\n  x: number;\n  y: number;\n  isMine: boolean;\n  isOpen: boolean;\n  isFlagged: boolean;\n  minesAround: number;\n}\n\ninterface IMinesMap {\n  [key: string]: boolean;\n}\n\nconst Minefield: FunctionComponent<IMinefieldProps> = ({\n  width, \n  height, \n  mines, \n  startedAt, \n  onFlagsChanged,\n  onMineRevealed,\n  onAllMinesFlagged\n }: IMinefieldProps) => {\n  const [tilesGrid, setTilesGrid] = useState<ITileData[][] | null>(null);\n\n  useEffect(() => {     \n    const plantedMines = plantMines(width, height, mines);\n    const tilesGrid = generateTilesGrid(width, height, (x, y) => {\n      return {\n        x, \n        y, \n        minesAround: findMinesAround(plantedMines, x, y),\n        isMine: isMine(plantedMines, x, y),\n        isFlagged: false,\n        isOpen: false\n      };\n    });\n\n    setTilesGrid(tilesGrid);\n  }, [width, height, mines, startedAt]);\n\n  const handleTileClick = (x: number, y: number, flagAction: boolean) => {\n    if (!tilesGrid || !tilesGrid[y] || !tilesGrid[y][x]) {\n      return;\n    }\n\n    let cell = tilesGrid[y][x];\n    if (!cell.isOpen && flagAction) {\n      if (cell.isFlagged) {\n        cell.isFlagged = false;\n        onFlagsChanged(1);\n      } else {\n        cell.isFlagged = true;\n        if (isAllMinesFlagged()) {\n          onAllMinesFlagged();\n        }\n        onFlagsChanged(-1);\n      }\n    } else if (!cell.isOpen && !cell.isFlagged) {\n      cell.isOpen = true;\n      if (cell.isMine) {\n        onMineRevealed();\n      } else if (cell.minesAround === 0) {\n        openEmptyNeighbours(x, y);\n      }\n    }\n    setTilesGrid([...tilesGrid]);\n  };\n\n  const isAllMinesFlagged = (): boolean => {\n    let flaggedMines = 0;\n    tilesGrid && tilesGrid.forEach((row) => row.forEach((cell: ITileData) => {\n      if (cell.isMine && cell.isFlagged) {\n        flaggedMines++;\n      }\n    }));\n    return flaggedMines === mines;\n  };\n\n  const openEmptyNeighbours = (x: number, y: number): ITileData[][] | null => {\n    const q = new Queue<number[]>();\n    q.enqueue([x, y]);\n\n    while(q.size > 0) {\n      const coords = q.dequeue();\n      if (coords) {\n        const [x, y] = coords;\n        for(let i = -1; i <= 1; i++) {\n          for(let j = -1; j <= 1; j++) {\n              if (j === 0 && i === 0) {\n                  continue;\n              }\n              let checkX = x + i, checkY = y + j;\n              if (tilesGrid && tilesGrid[checkY] && tilesGrid[checkY][checkX]) {\n                let cell = tilesGrid[checkY][checkX];\n                if (!cell.isOpen && cell.minesAround === 0) {\n                  cell.isOpen = true;\n                  q.enqueue([checkX, checkY]);\n                }\n              }\n          }\n        }\n      }\n    }\n    \n    return tilesGrid;\n  };\n\n\n  const isMine = (mines: IMinesMap, x: number, y: number): boolean => !!mines[x + '-' + y];\n\n  const findMinesAround = (minesMap: IMinesMap, x: number, y: number): number => {\n    let bombsAround = 0;\n    for(let i = -1; i <= 1; i++) {\n        for(let j = -1; j <= 1; j++) {\n            if (j === 0 && i === 0) {\n                continue;\n            }\n            if (isMine(minesMap, (x + i), (y + j))) {\n                bombsAround++;\n            }\n        }\n    }\n    return bombsAround;\n  };\n\n  const generateTilesGrid = (width: number, height: number, cb: (x: number, y: number) => ITileData): ITileData[][] => {\n    const rows = [];\n    for (let i = 0; i < height; i++) {\n      const cells = [];\n      for (let j = 0; j < width; j++) {\n        cells.push(cb(j, i));\n      }\n      rows.push(cells);\n    }\n    return rows;\n  };\n\n  const plantMines = (width: number, height: number, minesAmount: number): {[key: string]: boolean} => {\n    const randTo = (to: number): number => Math.round(Math.random() * (to - 1));\n    const mines: any = {};\n    while(minesAmount > 0) {\n      let x = randTo(width), y = randTo(height);\n      if (!isMine(mines, x, y)) {\n        mines[x+'-'+y] = true;\n        minesAmount--;\n      }\n    }\n    return mines;\n  };\n\n  const renderTilesGrid = () => {\n    if (tilesGrid === null ){\n      return null;\n    }\n    return tilesGrid.map((row, i) => \n      <div className=\"Minifield-row\" key={i}>\n        {row.map((props) => \n          <Tile key={props.x + '-' + props.y} {...props} onClick={handleTileClick} />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div key=\"Minefield\" className=\"Minefield\">{renderTilesGrid()}</div>\n  );\n}\n\nexport default Minefield;","import React, { useState, FunctionComponent } from 'react';\nimport './App.sass';\nimport Menu from '../Menu/Menu';\nimport Panel from '../Panel/Panel';\nimport Minefield from '../Minefield/Minefield';\n\nconst App: FunctionComponent = () => {\n  const [width, setWidthValue] = useState<number>(0);\n  const [height, setHeightValue] = useState<number>(0);\n  const [mines, setMinesValue] = useState<number>(0);\n  const [flagsCount, setFlagsCount] = useState<number>(0);\n  const [startedAt, setStartedAt] = useState<Date>(new Date());\n  const [displayMenu, setDisplayMenu] = useState<boolean|string>(true);\n\n  const handleGameStart = (width: number, height: number, mines: number) => {\n    if (mines > width * height) {\n      mines = width * height;\n    }\n    setWidthValue(width);\n    setHeightValue(height);\n    setMinesValue(mines);\n    setFlagsCount(mines);\n    setStartedAt(new Date());\n    setDisplayMenu(false);\n  };\n\n  const handleMineReveal = () => {\n    setDisplayMenu('💥You blown up!');\n  };\n  \n  const handleAllMinesFlagged = () => {\n    setDisplayMenu('🏆 You win!');\n  };\n  \n  const handleMenuButtonClick = () => {\n    setDisplayMenu(true);\n  };\n\n  const handleFlagsChange = (k: number) => {\n    const changedValue = (flagsCount + k);\n    if (changedValue < 0) {\n      return alert('No flags available');\n    }\n    setFlagsCount(flagsCount => changedValue >= 0 ? changedValue : 0);\n  };\n\n  return (\n    <div className=\"App\">\n      <Menu onGameStarted={handleGameStart} display={displayMenu} />\n\n      <div className=\"App-board\">\n        <Panel onMenuButtonClick={handleMenuButtonClick} \n          flagsCount={flagsCount} />\n\n        <Minefield width={width} height={height} mines={mines} \n          startedAt={startedAt} \n          onFlagsChanged={handleFlagsChange} \n          onMineRevealed={handleMineReveal}\n          onAllMinesFlagged={handleAllMinesFlagged} />\n      </div>\n  </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}